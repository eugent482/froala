@model SiteProduct.Models.ProductAddViewModel

@{
    ViewBag.Title = "Add";
}

<h2>Додати продукт</h2>
<i class="fa fa-plus"></i>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>AddProductViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description,
                   new { htmlAttributes = new { @class = "form-control", style="display: none" } })
                <div id="textEdit" class="html-editor-autoinit">

                </div>
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Styles {
    @Styles.Render("~/Content/froala")
}

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    @Scripts.Render("~/bundles/froala")

    <script>
        $(function () {
            $(".html-editor-autoinit").froalaEditor({
                toolbarButtons: ['bold', 'italic', 'underline', 'paragraphFormat', '|',
                    'color', 'emoticons', 'formatUL', 'formatOL', 'align', 'outdent', 'indent', '|',
                    'quote', 'insertHR', 'insertLink', 'insertImage', 'insertVideo', 'insertTable', 'undo', 'redo', 'clearFormatting', 'html'],
                imageUploadURL: '/Product/UploadImageDecription',
                imageMaxSize: 2 * 1024 * 1024,
                paragraphFormat: {
                    N: 'Звичайний',
                    H2: 'H2',
                    H3: 'H3',
                    H4: 'H4',
                    H5: 'H5',
                    H6: 'H6'
                },
                language: 'ua'
            })
                .on('froalaEditor.image.error', function (e, ditor, error, response) {
                    if (error.code == 5) {
                        alert("Розмір файлу не повинен бути більше 2 мб.");
                    }
                    return false;
                })
                // Catch image remove
                .on('froalaEditor.image.removed', function (e, editor, $img) {
                    $.ajax({
                        // Request method.
                        method: "POST",

                        // Request URL.
                        url: "/Product/DeleteImageDecription",

                        // Request params.
                        data: {
                            src: $img.attr('src')
                        }
                    });
                });
        });
    </script>
}
